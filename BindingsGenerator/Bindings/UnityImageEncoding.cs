// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace Rhongomyniad.Native
{
    public enum EncodeReturnCode
    {
        Fail = 0,
        Success = 1
    }

    public unsafe partial class UnityImageEncoding : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("UnityImageEncoding.Native.dll", EntryPoint = "??0UnityImageEncoding@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("UnityImageEncoding", EntryPoint = "??0UnityImageEncoding@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("UnityImageEncoding.Native.dll", EntryPoint = "?EncodeETC1@UnityImageEncoding@@SAHPEBEPEAEII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EncodeETC1(byte* sourceRgba32, byte* destination, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("UnityImageEncoding.Native.dll", EntryPoint = "?GetPkmHeaderSize@UnityImageEncoding@@SA_KXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetPkmHeaderSize();
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Rhongomyniad.Native.UnityImageEncoding> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Rhongomyniad.Native.UnityImageEncoding>();

        protected bool __ownsNativeInstance;

        internal static UnityImageEncoding __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new UnityImageEncoding(native.ToPointer(), skipVTables);
        }

        internal static UnityImageEncoding __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (UnityImageEncoding)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static UnityImageEncoding __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new UnityImageEncoding(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UnityImageEncoding(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UnityImageEncoding(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public UnityImageEncoding()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Rhongomyniad.Native.UnityImageEncoding.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public UnityImageEncoding(global::Rhongomyniad.Native.UnityImageEncoding _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Rhongomyniad.Native.UnityImageEncoding.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Rhongomyniad.Native.UnityImageEncoding.__Internal*) __Instance) = *((global::Rhongomyniad.Native.UnityImageEncoding.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static int EncodeETC1(byte* sourceRgba32, byte* destination, uint width, uint height)
        {
            var __ret = __Internal.EncodeETC1(sourceRgba32, destination, width, height);
            return __ret;
        }

        public static ulong PkmHeaderSize
        {
            get
            {
                var __ret = __Internal.GetPkmHeaderSize();
                return __ret;
            }
        }
    }
}
